name: CI/CD - Build -> Push ACR -> Deploy to AKS

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  RESOURCE_GROUP: 'Wisdom'
  CLUSTER_NAME: 'infinion-aks-cluster'
  ACR_NAME: 'infinionacr1760906713'
  NAMESPACE: 'infinion'

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.build.outputs.image_tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'  

      - name: Build project
        run: |
          dotnet build --configuration Release
          dotnet test --verbosity normal

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Build and push to ACR
        id: build
        run: |
          # Use ACR build instead of Docker build-push (simpler and uses Azure's build agents)
          az acr build --registry $ACR_NAME \
            --image ${{ env.IMAGE_NAME }}:${{ github.sha }} \
            --image ${{ env.IMAGE_NAME }}:latest \
            .
          echo "image_tag=${{ github.sha }}" >> $GITHUB_OUTPUT

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    environment: production
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set AKS context
        uses: azure/aks-set-context@v3
        with:
          resource-group: $RESOURCE_GROUP
          cluster-name: $CLUSTER_NAME

      - name: Deploy to AKS
        env:
          IMAGE_TAG: ${{ needs.build-and-push.outputs.image_tag }}
        run: |
          # Create namespace if not exists
          kubectl create namespace $NAMESPACE --dry-run=client -o yaml | kubectl apply -f -
          
          # Apply Kubernetes manifests
          kubectl apply -f k8s/namespace.yaml
          kubectl apply -f k8s/service.yaml
          
          # Update deployment with new image (handles both create and update)
          kubectl set image deployment/infinion-weather-api infinion-weather-api=$ACR_NAME.azurecr.io/infinion-weather-api:$IMAGE_TAG -n $NAMESPACE --record
          
          # If deployment doesn't exist, create it
          if ! kubectl get deployment/infinion-weather-api -n $NAMESPACE; then
            echo "Creating new deployment..."
            sed "s#REPLACE_WITH_ACR_LOGIN#$ACR_NAME.azurecr.io#g; s#REPLACE_TAG#$IMAGE_TAG#g" k8s/deployment.yaml | kubectl apply -f -
          fi
          
          # Wait for rollout to complete
          kubectl rollout status deployment/infinion-weather-api -n $NAMESPACE --timeout=300s

      - name: Verify deployment
        run: |
          echo "Deployment completed successfully!"
          kubectl get all -n $NAMESPACE
          
          # Get service URL for easy access
          SERVICE_IP=$(kubectl get service infinion-weather-api-service -n $NAMESPACE -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "pending")
          echo "Weather API URL: http://$SERVICE_IP/weatherforecast"